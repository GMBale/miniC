
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 30 19:54:49 KST 2014
//----------------------------------------------------

package default_package;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 30 19:54:49 KST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\002\000\002\005\005" +
    "\000\002\003\003\000\002\003\004\000\002\010\010\000" +
    "\002\010\007\000\002\004\003\000\002\004\004\000\002" +
    "\007\003\000\002\007\006\000\002\006\003\000\002\006" +
    "\005\000\002\011\004\000\002\011\006\000\002\012\003" +
    "\000\002\012\003\000\002\013\006\000\002\013\005\000" +
    "\002\015\003\000\002\015\003\000\002\023\007\000\002" +
    "\023\011\000\002\023\007\000\002\023\013\000\002\024" +
    "\011\000\002\024\011\000\002\024\007\000\002\024\013" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\014\002\000\002\014\004\000\002\016\004\000\002\017" +
    "\005\000\002\017\010\000\002\020\004\000\002\021\006" +
    "\000\002\021\005\000\002\022\005\000\002\022\004\000" +
    "\002\025\011\000\002\026\002\000\002\026\004\000\002" +
    "\026\003\000\002\027\010\000\002\027\006\000\002\030" +
    "\007\000\002\030\005\000\002\032\003\000\002\032\005" +
    "\000\002\031\004\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\006\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\002\ufffd\020\013\021\012\001\002\000" +
    "\004\002\231\001\002\000\034\002\ufffb\010\ufffb\011\ufffb" +
    "\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\030\ufffb\040\ufffb\001\002\000\010\002\ufff7" +
    "\020\ufff7\021\ufff7\001\002\000\010\002\uffff\020\013\021" +
    "\012\001\002\000\004\040\227\001\002\000\010\002\ufffe" +
    "\020\013\021\012\001\002\000\004\040\uffee\001\002\000" +
    "\004\040\uffef\001\002\000\010\002\ufff6\020\ufff6\021\ufff6" +
    "\001\002\000\004\040\016\001\002\000\004\006\017\001" +
    "\002\000\010\007\021\020\013\021\012\001\002\000\006" +
    "\007\223\014\222\001\002\000\004\010\031\001\002\000" +
    "\004\040\023\001\002\000\012\007\ufff5\012\025\014\ufff5" +
    "\016\ufff5\001\002\000\006\007\ufff1\014\ufff1\001\002\000" +
    "\004\041\026\001\002\000\004\013\027\001\002\000\010" +
    "\007\ufff4\014\ufff4\016\ufff4\001\002\000\010\002\ufff8\020" +
    "\ufff8\021\ufff8\001\002\000\032\010\uffdb\011\uffdb\016\uffdb" +
    "\020\013\021\012\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\040\uffdb\001\002\000\032\010\uffdb\011\uffdb" +
    "\016\uffdb\020\013\021\012\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\040\uffdb\001\002\000\004\040\023" +
    "\001\002\000\026\010\031\011\050\016\042\022\046\023" +
    "\053\024\045\025\057\026\051\030\047\040\052\001\002" +
    "\000\036\010\uffde\011\uffde\016\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\uffde\040\uffde\001\002\000\034\010\uffea\011\uffea\016" +
    "\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\040\uffea\001\002\000\004\016" +
    "\211\001\002\000\034\010\uffeb\011\uffeb\016\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\040\uffeb\001\002\000\034\010\uffda\011\uffda" +
    "\016\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\040\uffda\001\002\000\036" +
    "\010\uffdc\011\uffdc\016\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\040\uffdc\001\002\000\036\010\uffe1\011\uffe1\016\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\040\uffe1\001\002\000\004\016" +
    "\210\001\002\000\004\006\203\001\002\000\016\005\070" +
    "\006\072\016\201\040\064\041\066\042\071\001\002\000" +
    "\004\006\154\001\002\000\044\002\uffec\010\uffec\011\uffec" +
    "\016\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\040\uffec\001\002\000\004\006\144\001\002\000\010\006" +
    "\115\012\127\015\130\001\002\000\024\010\031\016\042" +
    "\022\046\023\053\024\045\025\057\026\051\030\047\040" +
    "\052\001\002\000\036\010\uffdd\011\uffdd\016\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\040\uffdd\001\002\000\036\010\uffe0" +
    "\011\uffe0\016\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\040\uffe0" +
    "\001\002\000\036\010\uffdf\011\uffdf\016\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\040\uffdf\001\002\000\004\006\060\001" +
    "\002\000\004\040\061\001\002\000\006\012\127\015\130" +
    "\001\002\000\004\016\063\001\002\000\014\005\070\006" +
    "\072\040\064\041\066\042\071\001\002\000\030\005\uffbe" +
    "\006\115\007\uffbe\012\116\013\uffbe\014\uffbe\016\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\001\002\000\024\005\uffc1" +
    "\007\uffc1\013\uffc1\014\uffc1\016\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\001\002\000\024\005\uffc0\007\uffc0\013\uffc0" +
    "\014\uffc0\016\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\001" +
    "\002\000\016\005\100\016\110\034\077\035\076\036\101" +
    "\037\074\001\002\000\014\005\070\006\072\040\064\041" +
    "\066\042\071\001\002\000\024\005\uffbf\007\uffbf\013\uffbf" +
    "\014\uffbf\016\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\001" +
    "\002\000\014\005\070\006\072\040\064\041\066\042\071" +
    "\001\002\000\016\005\100\007\075\034\077\035\076\036" +
    "\101\037\074\001\002\000\014\005\070\006\072\040\064" +
    "\041\066\042\071\001\002\000\024\005\uffbc\007\uffbc\013" +
    "\uffbc\014\uffbc\016\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\001\002\000\014\005\070\006\072\040\064\041\066\042" +
    "\071\001\002\000\014\005\070\006\072\040\064\041\066" +
    "\042\071\001\002\000\014\005\070\006\072\040\064\041" +
    "\066\042\071\001\002\000\014\005\070\006\072\040\064" +
    "\041\066\042\071\001\002\000\024\005\100\007\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\034\077\035\076\036\uffc3\037\uffc3" +
    "\001\002\000\024\005\uffc4\007\uffc4\013\uffc4\014\uffc4\016" +
    "\uffc4\034\077\035\uffc4\036\uffc4\037\uffc4\001\002\000\024" +
    "\005\uffc6\007\uffc6\013\uffc6\014\uffc6\016\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\001\002\000\024\005\uffc5\007\uffc5" +
    "\013\uffc5\014\uffc5\016\uffc5\034\077\035\uffc5\036\uffc5\037" +
    "\uffc5\001\002\000\024\005\100\007\uffc2\013\uffc2\014\uffc2" +
    "\016\uffc2\034\077\035\076\036\101\037\uffc2\001\002\000" +
    "\024\005\uffc7\007\uffc7\013\uffc7\014\uffc7\016\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\001\002\000\004\040\061\001" +
    "\002\000\004\007\112\001\002\000\024\010\031\016\042" +
    "\022\046\023\053\024\045\025\057\026\051\030\047\040" +
    "\052\001\002\000\036\010\uffe2\011\uffe2\016\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\040\uffe2\001\002\000\034\010\uffe6" +
    "\011\uffe6\016\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\040\uffe6\001\002" +
    "\000\016\005\070\006\072\007\123\040\064\041\066\042" +
    "\071\001\002\000\014\005\070\006\072\040\064\041\066" +
    "\042\071\001\002\000\016\005\100\013\120\034\077\035" +
    "\076\036\101\037\074\001\002\000\024\005\uffbd\007\uffbd" +
    "\013\uffbd\014\uffbd\016\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\001\002\000\020\005\100\007\uffc9\014\uffc9\034\077" +
    "\035\076\036\101\037\074\001\002\000\006\007\125\014" +
    "\124\001\002\000\024\005\uffd4\007\uffd4\013\uffd4\014\uffd4" +
    "\016\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\001\002\000" +
    "\014\005\070\006\072\040\064\041\066\042\071\001\002" +
    "\000\024\005\uffd5\007\uffd5\013\uffd5\014\uffd5\016\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\020\005\100" +
    "\007\uffc8\014\uffc8\034\077\035\076\036\101\037\074\001" +
    "\002\000\014\005\070\006\072\040\064\041\066\042\071" +
    "\001\002\000\014\005\070\006\072\040\064\041\066\042" +
    "\071\001\002\000\020\005\100\007\uffd8\016\uffd8\034\077" +
    "\035\076\036\101\037\074\001\002\000\016\005\100\013" +
    "\133\034\077\035\076\036\101\037\074\001\002\000\004" +
    "\015\134\001\002\000\014\005\070\006\072\040\064\041" +
    "\066\042\071\001\002\000\020\005\100\007\uffd7\016\uffd7" +
    "\034\077\035\076\036\101\037\074\001\002\000\004\024" +
    "\137\001\002\000\004\006\140\001\002\000\014\005\070" +
    "\006\072\040\064\041\066\042\071\001\002\000\016\005" +
    "\100\007\142\034\077\035\076\036\101\037\074\001\002" +
    "\000\004\016\143\001\002\000\036\010\uffe5\011\uffe5\016" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\040\uffe5\001\002\000" +
    "\014\005\070\006\072\040\064\041\066\042\071\001\002" +
    "\000\016\005\100\007\146\034\077\035\076\036\101\037" +
    "\074\001\002\000\024\010\031\016\042\022\046\023\053" +
    "\024\045\025\057\026\051\030\047\040\052\001\002\000" +
    "\036\010\uffea\011\uffea\016\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\151\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\040\uffea\001\002\000\034\010\uffe9\011\uffe9\016\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\040\uffe9\001\002\000\024\010\031" +
    "\016\042\022\046\023\053\024\045\025\057\026\051\030" +
    "\047\040\052\001\002\000\036\010\uffe4\011\uffe4\016\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\040\uffe4\001\002\000\034" +
    "\010\uffe8\011\uffe8\016\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\040\uffe8" +
    "\001\002\000\004\040\023\001\002\000\004\007\156\001" +
    "\002\000\004\010\157\001\002\000\010\011\uffd0\031\163" +
    "\033\160\001\002\000\004\017\174\001\002\000\004\011" +
    "\uffce\001\002\000\010\011\uffd0\031\163\033\160\001\002" +
    "\000\004\041\166\001\002\000\004\011\165\001\002\000" +
    "\036\010\uffd1\011\uffd1\016\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\040\uffd1\001\002\000\004\017\167\001\002\000\034" +
    "\010\uffdb\011\uffdb\016\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\040\uffdb" +
    "\001\002\000\034\010\031\011\uffcc\016\042\022\046\023" +
    "\053\024\045\025\057\026\051\030\047\031\uffcc\032\171" +
    "\033\uffcc\040\052\001\002\000\004\016\172\001\002\000" +
    "\010\011\uffcd\031\uffcd\033\uffcd\001\002\000\004\011\uffcf" +
    "\001\002\000\030\010\uffdb\011\uffdb\016\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\032\uffdb\040\uffdb" +
    "\001\002\000\030\010\031\011\uffca\016\042\022\046\023" +
    "\053\024\045\025\057\026\051\030\047\032\176\040\052" +
    "\001\002\000\004\016\177\001\002\000\004\011\uffcb\001" +
    "\002\000\016\005\100\016\202\034\077\035\076\036\101" +
    "\037\074\001\002\000\036\010\uffd2\011\uffd2\016\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\040\uffd2\001\002\000\036\010" +
    "\uffd3\011\uffd3\016\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\040" +
    "\uffd3\001\002\000\014\005\070\006\072\040\064\041\066" +
    "\042\071\001\002\000\016\005\100\007\205\034\077\035" +
    "\076\036\101\037\074\001\002\000\024\010\031\016\042" +
    "\022\046\023\053\024\045\025\057\026\051\030\047\040" +
    "\052\001\002\000\036\010\uffe3\011\uffe3\016\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\040\uffe3\001\002\000\034\010\uffe7" +
    "\011\uffe7\016\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\040\uffe7\001\002" +
    "\000\036\010\uffd9\011\uffd9\016\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\040\uffd9\001\002\000\036\010\uffd6\011\uffd6\016" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\040\uffd6\001\002\000" +
    "\006\014\214\016\215\001\002\000\006\014\ufff3\016\ufff3" +
    "\001\002\000\004\040\023\001\002\000\034\002\ufffc\010" +
    "\ufffc\011\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\030\ufffc\040\ufffc\001\002\000" +
    "\006\014\ufff2\016\ufff2\001\002\000\034\002\ufffa\010\ufffa" +
    "\011\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\030\ufffa\040\ufffa\001\002\000\026" +
    "\010\031\011\221\016\042\022\046\023\053\024\045\025" +
    "\057\026\051\030\047\040\052\001\002\000\044\002\uffed" +
    "\010\uffed\011\uffed\016\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\040\uffed\001\002\000\006\020\013\021" +
    "\012\001\002\000\004\010\031\001\002\000\010\002\ufff9" +
    "\020\ufff9\021\ufff9\001\002\000\004\040\023\001\002\000" +
    "\006\007\ufff0\014\ufff0\001\002\000\012\006\017\012\025" +
    "\014\ufff5\016\ufff5\001\002\000\010\002\001\020\013\021" +
    "\012\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\016\002\003\003\006\004\010\005\004\010" +
    "\005\012\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\227\005\216\010\005\012" +
    "\007\001\001\000\006\006\211\007\212\001\001\000\006" +
    "\010\013\012\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\017\012\021\001\001\000\002\001\001\000" +
    "\004\013\027\001\001\000\004\007\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\031" +
    "\005\004\012\032\014\033\001\001\000\010\005\216\012" +
    "\032\014\217\001\001\000\006\006\211\007\212\001\001" +
    "\000\026\013\053\015\040\016\042\017\043\020\054\021" +
    "\036\022\055\023\037\024\035\025\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\064\031" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\013\053\015\135\016" +
    "\042\017\043\020\054\021\036\022\055\023\037\024\035" +
    "\025\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\064\031" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\064\031\106\001" +
    "\001\000\002\001\001\000\006\021\064\031\072\001\001" +
    "\000\002\001\001\000\006\021\064\031\105\001\001\000" +
    "\002\001\001\000\006\021\064\031\104\001\001\000\006" +
    "\021\064\031\103\001\001\000\006\021\064\031\102\001" +
    "\001\000\006\021\064\031\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\110\001\001" +
    "\000\002\001\001\000\024\013\053\016\042\017\043\020" +
    "\054\021\036\022\055\023\113\024\112\025\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\064\031" +
    "\120\032\121\001\001\000\006\021\064\031\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\064\031\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\064\031\131\001\001\000\006\021\064\031\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\064\031\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\064\031\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\064\031\144\001\001\000\002\001\001\000" +
    "\026\013\053\015\147\016\042\017\043\020\054\021\036" +
    "\022\055\023\037\024\146\025\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\013\053\016\042\017\043" +
    "\020\054\021\036\022\055\023\152\024\151\025\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\163\027\161\030\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\172\027\161\030\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\167\001\001\000\026\013\053\015" +
    "\040\016\042\017\043\020\054\021\036\022\055\023\037" +
    "\024\035\025\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\174\001\001\000\026" +
    "\013\053\015\040\016\042\017\043\020\054\021\036\022" +
    "\055\023\037\024\035\025\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\064\031\203\001\001\000\002" +
    "\001\001\000\024\013\053\016\042\017\043\020\054\021" +
    "\036\022\055\023\206\024\205\025\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\013\053\015\040\016\042\017\043\020\054" +
    "\021\036\022\055\023\037\024\035\025\034\001\001\000" +
    "\002\001\001\000\004\012\224\001\001\000\004\013\223" +
    "\001\001\000\002\001\001\000\004\007\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\013\012\014" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    public void production_print(Object Content) {
      System.out.println("\nPRODUCTION_PRINT : " + Content.toString());
    }    


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr r2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("(",r1left,r1right), r2, new Terminal(")",r3left,r3right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= ID LSBRACKET Expr RSBRACKET 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right), new Terminal("[",r2left,r2right), r3, new Terminal("]",r4left,r4right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= ID 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= FLOATNUM 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float r1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("FLOATNUM",r1,r1left,r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= INTNUM 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer r1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("INTNUM",r1,r1left,r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Call 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call r1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(r2,r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr REL Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(r2,r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal("-",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal("+",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr MULDIV Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(r2,r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expr(new ArrayList<Absyn>(Arrays.asList(new Terminal("-",r1left,r1right), r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ArgList ::= ArgList COMMA Expr 
            {
              ArgList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgList r1 = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgList(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(",",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ArgList ::= Expr 
            {
              ArgList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgList(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CaseListLater ::= DEFAULT COLON StmtList 
            {
              CaseListLater RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtList r3 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseListLater(new ArrayList<Absyn>(Arrays.asList(new Terminal("DEFAULT",r1left,r1right), new Terminal(":",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseListLater",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CaseListLater ::= DEFAULT COLON StmtList BREAK SEMI 
            {
              CaseListLater RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtList r3 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseListLater(new ArrayList<Absyn>(Arrays.asList(new Terminal("DEFAULT",r1left,r1right), new Terminal(":",r2left,r2right), r3, new Terminal("BREAK",r4left,r4right), new Terminal(";",r5left,r5right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseListLater",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CaseListFormer ::= CASE INTNUM COLON StmtList 
            {
              CaseListFormer RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StmtList r4 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseListFormer(new ArrayList<Absyn>(Arrays.asList(new Terminal("CASE",r1left,r1right), new Terminal("INTNUM",r2,r2left,r2right), new Terminal(":",r3left,r3right), r4))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseListFormer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CaseListFormer ::= CASE INTNUM COLON StmtList BREAK SEMI 
            {
              CaseListFormer RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer r2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtList r4 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseListFormer(new ArrayList<Absyn>(Arrays.asList(new Terminal("CASE",r1left,r1right), new Terminal("INTNUM",r2,r2left,r2right), new Terminal(":",r3left,r3right), r4, new Terminal("BREAK",r5left,r5right), new Terminal(";",r6left,r6right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseListFormer",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CaseList ::= CaseListLater 
            {
              CaseList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseListLater r1 = (CaseListLater)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseList(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CaseList ::= CaseListFormer CaseList 
            {
              CaseList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseListFormer r1 = (CaseListFormer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseList r2 = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CaseList(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CaseList ::= 
            {
              CaseList RESULT =null;
		 RESULT = new CaseList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseList",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SwitchStmt ::= SWITCH LPAREN Identifier RPAREN LCBRACKET CaseList RCBRACKET 
            {
              SwitchStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier r3 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CaseList r6 = (CaseList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SwitchStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("SWITCH",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), new Terminal("{",r5left,r5right), r6, new Terminal("}",r7left,r7right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RetStmt ::= RETURN SEMI 
            {
              RetStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RetStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("RETURN",r1left,r1right), new Terminal(";",r2left,r2right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RetStmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RetStmt ::= RETURN Expr SEMI 
            {
              RetStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr r2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RetStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("RETURN",r1left,r1right), r2, new Terminal(";",r3left,r3right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RetStmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Call ::= ID LPAREN RPAREN 
            {
              Call RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right), new Terminal("(",r2left,r2right), new Terminal(")",r3left,r3right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Call ::= ID LPAREN ArgList RPAREN 
            {
              Call RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgList r3 = (ArgList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Call(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CallStmt ::= Call SEMI 
            {
              CallStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Call r1 = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallStmt(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(";",r2left,r2right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallStmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Assign ::= ID LSBRACKET Expr RSBRACKET ASSIGN Expr 
            {
              Assign RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r6 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right), new Terminal("[",r2left,r2right), r3, new Terminal("]",r4left,r4right), new Terminal("=",r5left,r5right), r6))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Assign ::= ID ASSIGN Expr 
            {
              Assign RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID",r1,r1left,r1right), new Terminal("=",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AssignStmt ::= Assign SEMI 
            {
              AssignStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assign r1 = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStmt(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(";",r2left,r2right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StmtList ::= StmtList Stmt 
            {
              StmtList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList r1 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt r2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtList(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StmtList ::= 
            {
              StmtList RESULT =null;
		 RESULT = new StmtList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClosedStmt ::= SEMI 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal(";",r1left,r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClosedStmt ::= CompoundStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt r1 = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClosedStmt ::= SwitchStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SwitchStmt r1 = (SwitchStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ClosedStmt ::= RetStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RetStmt r1 = (RetStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClosedStmt ::= CallStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallStmt r1 = (CallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClosedStmt ::= AssignStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt r1 = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClosedStmt ::= FOR LPAREN Assign SEMI Expr SEMI Assign RPAREN ClosedStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Assign r3 = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr r5 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assign r7 = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClosedStmt r9 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("FOR",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(";",r4left,r4right), r5, new Terminal(";",r6left,r6right), r7, new Terminal(")",r8left,r8right), r9))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClosedStmt ::= WHILE LPAREN Expr RPAREN ClosedStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClosedStmt r5 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("WHILE",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), r5))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClosedStmt ::= IF LPAREN Expr RPAREN ClosedStmt ELSE ClosedStmt 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClosedStmt r5 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClosedStmt r7 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("IF",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), r5, new Terminal("ELSE",r6left,r6right), r7))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClosedStmt ::= DO Stmt WHILE LPAREN Expr RPAREN SEMI 
            {
              ClosedStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Stmt r2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r5 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ClosedStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("DO",r1left,r1right), r2, new Terminal("WHILE",r3left,r3right), new Terminal("(",r4left,r4right), r5, new Terminal(")",r6left,r6right), new Terminal(";",r7left,r7right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosedStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OpenStmt ::= FOR LPAREN Assign SEMI Expr SEMI Assign RPAREN OpenStmt 
            {
              OpenStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Assign r3 = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr r5 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assign r7 = (Assign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r8 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OpenStmt r9 = (OpenStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpenStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("FOR",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(";",r4left,r4right), r5, new Terminal(";",r6left,r6right), r7, new Terminal(")",r8left,r8right), r9))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpenStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OpenStmt ::= WHILE LPAREN Expr RPAREN OpenStmt 
            {
              OpenStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OpenStmt r5 = (OpenStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpenStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("WHILE",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), r5))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpenStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OpenStmt ::= IF LPAREN Expr RPAREN ClosedStmt ELSE OpenStmt 
            {
              OpenStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ClosedStmt r5 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OpenStmt r7 = (OpenStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpenStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("IF",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), r5, new Terminal("ELSE",r6left,r6right), r7))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpenStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OpenStmt ::= IF LPAREN Expr RPAREN Stmt 
            {
              OpenStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr r3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt r5 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpenStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("IF",r1left,r1right), new Terminal("(",r2left,r2right), r3, new Terminal(")",r4left,r4right), r5))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OpenStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= ClosedStmt 
            {
              Stmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClosedStmt r1 = (ClosedStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= OpenStmt 
            {
              Stmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OpenStmt r1 = (OpenStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Stmt(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CompoundStmt ::= LCBRACKET StmtList RCBRACKET 
            {
              CompoundStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList r2 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("{",r1left,r1right), r2, new Terminal("}",r3left,r3right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CompoundStmt ::= LCBRACKET DeclList StmtList RCBRACKET 
            {
              CompoundStmt RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList r2 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList r3 = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CompoundStmt(new ArrayList<Absyn>(Arrays.asList(new Terminal("{",r1left,r1right), r2, r3, new Terminal("}",r4left,r4right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= FLOAT 
            {
              Type RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(new ArrayList<Absyn>(Arrays.asList(new Terminal("float",r1left, r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT 
            {
              Type RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(new ArrayList<Absyn>(Arrays.asList(new Terminal("int", r1left, r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParamList ::= ParamList COMMA Type Identifier 
            {
              ParamList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParamList r1 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type r3 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier r4 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamList(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(",", r2left, r2right), r3, r4))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParamList ::= Type Identifier 
            {
              ParamList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type r1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier r2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamList(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdentList ::= IdentList COMMA Identifier 
            {
              IdentList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdentList r1 = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier r3 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentList(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal(",",r2left,r2right), r3))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdentList ::= Identifier 
            {
              IdentList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier r1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentList(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdentList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Identifier ::= ID LSBRACKET INTNUM RSBRACKET 
            {
              Identifier RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer r3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID", r1, r1left, r1right), new Terminal("[", r2left, r2right), new Terminal("INTNUM", r3, r3left, r3right), new Terminal("]", r4left, r4right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Identifier ::= ID 
            {
              Identifier RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(new ArrayList<Absyn>(Arrays.asList(new Terminal("ID", r1, r1left, r1right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FuncList ::= FuncList Function 
            {
              FuncList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FuncList r1 = (FuncList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function r2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncList(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FuncList ::= Function 
            {
              FuncList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function r1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncList(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Function ::= Type ID LPAREN RPAREN CompoundStmt 
            {
              Function RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type r1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt r5 = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal("ID",r2,r2left,r2right), new Terminal("(",r3left,r3right), new Terminal(")",r4left,r4right), r5))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Function ::= Type ID LPAREN ParamList RPAREN CompoundStmt 
            {
              Function RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type r1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int r4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParamList r4 = (ParamList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt r6 = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(new ArrayList<Absyn>(Arrays.asList(r1, new Terminal("ID",r2,r2left,r2right), new Terminal("(",r3left,r3right), r4, new Terminal(")",r5left,r5right), r6))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclList ::= DeclList Declaration 
            {
              DeclList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r1 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration r2 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= Declaration 
            {
              DeclList RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration r1 = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= Type IdentList SEMI 
            {
              Declaration RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type r1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdentList r2 = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(new ArrayList<Absyn>(Arrays.asList(r1, r2, new Terminal(";", r3left, r3right)))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= 
            {
              Program RESULT =null;
		 RESULT = new Program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= FuncList 
            {
              Program RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncList r1 = (FuncList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= DeclList 
            {
              Program RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList r1 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(new ArrayList<Absyn>(Arrays.asList(r1))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList FuncList 
            {
              Program RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r1 = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FuncList r2 = (FuncList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(new ArrayList<Absyn>(Arrays.asList(r1, r2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

